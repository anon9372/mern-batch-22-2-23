What is Asyc Javascript?
-> Handles multiple tasks simultaneously
-> Allows a program to continue working on other task while waiting for external events, such as Network Reqs.


What are the types of Asyn JS?

1) Callback function 
2) Promises 
3) Asyc/Await 


1) Callback function: it is a function that is passed as an argument to another function and is executed after the first function has completed its execution.

const newFunc = (newCallback) => {
// I will perform my tasks and give output
//newCallback(output)

}

const newCallback = () => {
    
}


--> Callback Hell: When multiple Callbacks are nested within then that leads to callback hell it is also know as 'Pyramid of Doom'

getData(function (a)) {
    getMoreData(a, function(b)) {
        getEvenMoreData(b, function(c)){
            getEvenEvenMoreData(c, function(d)) {
                console.log(finalData)
            }
        }
    }
}


2) Promises: it is a way of handling async operations in an organized way. It is similar to CB but offers additional capabilities and the syntax is more readable..


        There are 3 states in promises: 
            1) Pending: Initail state, which is neither fullfilled or rejected
            2) Fullfilled: Promise is executed successfully
            3) Rejected: Promise failed

How to create a promise: 

    const myPromise = new Promise(function (res, rej) {

    })

     const myPromise = new Promise(function (res, rej) {
       setTimeout(() => {
         res('This is a promise')
       }, 2000)
    })
 
 console.log(myPromise)

  Creating a promise with Fetch APIs 

    fetch ('http://random-api.com')  -> [{}, {}, {}]
        .then(res => res.json())
        .then(data => {console.log(data)})

        .catch(err => {
            console.log(err)
        })


3) Asyc/Await: it allows us to write async code in a more sync  and readable way.

 async -> a keyword that is used to declare a function as async
 await -> a keyword that is used inside the async function to pause the execution of the function until the promise is executed

 const getData = async () => {
    const res = await fetch('http://random-api.com')
    const data = await res.json()
    console.log(data)
 }

 getData()

 ========================================================================================================

What NodeJS is?

> Node is a back-end JS runtime environment
> Runs on Chrome V8 Engine 
> Executes JS outside the browser 

Browser vs NodeJS

DOM         -   No Dom 
Window      -   No window 
Interactive apps  - Server side apps 
No file system  - File System 


Current Version of NodeJS: 18.14.2 LTS -> Long Time Support 

anilvarma@Anils-MacBook-Air ~ % node -v
v16.14.2


There are 2 method to run or execute a JS file on Node envi: 

1) REPL -> Read Eval Print Loop
2) CLI (VS CODE) -> Command Line Interface (Code Editors)


==========================================================================


GLOBAL VARIABLES: 

GV in NodeJS are the variables that can be declared with a value and which can be accessed anywhere througout the program.
The scope of the GV is not limited to any function or a file.

__dirname -> To obtain the current path to the direactory
__filename => to obtain the name of the file
require -> used to import a file
module -> gives info about the current module 
process -> gives infor about the env where the program is exe

==============FIND OUT OTHER GVs======================

MODULES:

Modules -> Encapsulated Code (it is just a file)

    1) Manually created 
    2) In-built -> os, path, fs, http

        a) os: 

        b) path module: 
            - create a path
            - access the file or the file name
            - we can find the absolute path

        c) fs (file system)

        d) http module


    3) Externall Packages 


======================================================================================================================

NPM PACKAGES

installing to devDep: npm i <packageName> --save-dev     
installing to dev: npm i <packageName>
installing globally: npm i <packageName> -g


======================================================================================================================

Event Loop:
The event loop is what allows Node.js to perform non-blocking I/O operations — despite the fact that JavaScript is single-threaded — by offloading operations to the system kernel whenever possible.



Event emitter and Streams:

In Node.js, an event emitter is a core module that allows developers to create and handle custom events. It is a fundamental building block for developing event-driven applications in Node.js.

The event emitter module provides a class called EventEmitter that can be extended to create custom event emitters. The EventEmitter class provides several methods, including on(), emit(), and once(), that allow you to register listeners for events and trigger events

Event emitters are used extensively in Node.js applications, including web servers, database connections, and other types of I/O operations. They allow developers to write asynchronous, non-blocking code that can handle multiple events at the same time.


once some async func is triggered event is emitted.



STREAMS: 
A node stream is a method of transferring large amounts of data on mobile devices or websites by breaking the file or data down into manageable chunks.

default size is : 64kb 
highWaterMark method is used to control the size of the file

============================EXPRESS JS===================================

>> Minimal
>> Flexible
>> Robust 
 
 NodeJS web application framwork, used to build RESTful APIs. (Represntatinal State Transfer)

 // CRUD Operations
// Create, Read, Update and Delete

// app.get -> Read
// app.post -> Create
// app.put -> Update
// app.delete -> Delete

// app.all -> Every other route
// app.use -> used to import or work with middleware
// app.listen -> To listen to the port


SSR - Template, res.render()

API - json, data, res.json()

=============== PARAMS and QUERY ===========================

Params: Parameters that are requested by the client through the api



ARRAY METHODS:

slice, splice, filter, index, find, startsWith, push, pop, shift, unShift, indexOf, includes, reduce, map, forEach

================== MIDDLEWARE ========================

>> Basically functions
>> These functions are executed during the 'req' of the server 
>> Each of the MW has its own req and res
>> req > MW > res


>> APP.USE is used if we want to use the middleware for all the routes in the file, however if we want to use the middleware specifically in a particular route then we dont need to use APP.USE